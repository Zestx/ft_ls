****************ft_ls****************
**IMPLEMENTATION OF THE LS COMMAND.**
*************************************


I. Get and parse the arguments.

	1. Check for options:
		a. Options must be set before the directories (if there's any specified):
			<ft_ls [-aBcD -Oxr] [directory]>
		   So there maybe multiple arguments containing options, but they must be the first ones after
		   the command itself.
		b. Store all the options into a table that we can check later when needed.
	
	2. The other arguments should be the directories to list.

II. List the content of the directories.
	
	1. Is there any directories specified in the call to the program?
	IF NOT:
		a. Use "." (current working directory) as the directory to list.
	IF YES:
		a. Send them one by one to the actual listing part of the program.
		b. Also send the options so the listing is done accordingly.
		c. Check for the validity of the directories / pathes while opening them..
		d. Actually display their content, recursively if -R is set.
	2. Exit program.

III. Options.

	0.	//: by default, ft_ls only display the non-hidden files names in one column (like ls -1).
	1.	-a:	if this option is activated, display hidden files too (starting with a dot '.').
	2.	-l: long output format. If this option is activated, some informations about each files
			are displayed along it's name, in a table format (each line is a file, each column is
			a different information). Those additional informations are:
			- file mode (it's type and protections), like this: '-rwxr-x-r--'.
			- number of links (to this file).
			- owner name and if relevant, group name.
			- number of bytes in the file.
			- month and day last modified (abbreviated), like this: 'jan 10'.
			- hours and minutes last modified, like this: '18:40'.
			  If the file is older than 6 months, then the year is presented instead.
			- file name.
			Exemple:

			$>ft_ls .
			total 64
			-rw-r--r--	1	username	1285 Jan 10 17:58 Somefile
			...
			...
			
